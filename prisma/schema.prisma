generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:heb5HHGBe!4u2N@212.227.179.23:3306/saturne"
}

model Account {
  id          String    @id
  username    String?   @default("No username")
  create_date DateTime  @default(now())
  plan        PlanEnum  @default(FREE)
  blacklisted Boolean   @default(false)
  last_login  DateTime  @default(now())
  last_ip     String?
  expires     DateTime  @default(now())
  beta        Boolean   @default(false)
  admin       Boolean   @default(false)
  Setting     Setting?
  Discord     Discord[]
  Social      Social[]
  Quotes      Quotes[]
  View        View[]
  Badges      Badges[]
}

model Setting {
  account_id String  @id @unique
  account    Account @relation(fields: [account_id], references: [id])
  url        String  @unique @default(cuid())
  username   String  @default(cuid())
  bio        String  @default("No bio")
  avatar     Boolean @default(false)
  background String  @default("https://i.imgur.com/3v3J9v6.jpg")
  views      Boolean @default(true)
  View       View[]
}

model Discord {
  account_id String  @id
  account    Account @relation(fields: [account_id], references: [id])
  invite     String
  index      Int     @default(0)

  @@unique([account_id, invite])
  @@unique([account_id, index])
}

model Social {
  account_id String  @id
  account    Account @relation(fields: [account_id], references: [id])
  type       String
  url        String
  index      Int     @default(0)

  @@unique([account_id, index])
}

model Quotes {
  account_id String  @id
  account    Account @relation(fields: [account_id], references: [id])
  text       String

  @@unique([account_id, text])
}

model View {
  id         String   @id @default(uuid())
  ip         String
  date       DateTime @default(now())
  profile_id String
  profile    Setting  @relation(fields: [profile_id], references: [account_id])
  account_id String?
  account    Account? @relation(fields: [account_id], references: [id])

  @@unique([ip, profile_id])
}

model Badges {
  id         String  @id @default(dbgenerated("uuid()"))
  account_id String
  account    Account @relation(fields: [account_id], references: [id])
  badge      String
}

enum PlanEnum {
  FREE
  PREMIUM
  PREMIUM_PLUS
}
